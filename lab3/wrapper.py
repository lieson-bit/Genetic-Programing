# wrapper.py
import builtins
import runpy
import sys
import io
from typing import Any

# --- –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∫–ª—é—á–∏ ‚Äî –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Ä—É—Å—Å–∫–∏–µ) ---
TRANSLATIONS = {
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏/–æ–±—â–∏–µ
    "GENETIC ALGORITHM - KNAPSACK PROBLEM ANALYSIS": "üß¨ –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ì–û–†–ò–¢–ú - –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò KNAPSACK",
    "TASK 1: SIMPLE PROBLEM (P07) - OPTIMAL RUN": "–ó–ê–î–ê–ù–ò–ï 1: –ü–†–û–°–¢–ê–Ø –ó–ê–î–ê–ß–ê (P07) - –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö",
    "TASK 2: COMPLEX PROBLEM (Set 7)": "–ó–ê–î–ê–ù–ò–ï 2: –°–õ–û–ñ–ù–ê–Ø –ó–ê–î–ê–ß–ê (Set 7)",
    "PARAMETER SENSITIVITY ANALYSIS": "–ê–ù–ê–õ–ò–ó –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–ê–†–ê–ú–ï–¢–†–û–í",
    "ENCODING TYPE COMPARISON": "–°–†–ê–í–ù–ï–ù–ò–ï –¢–ò–ü–û–í –ö–û–î–ò–†–û–í–ê–ù–ò–Ø",
    "FINAL SUMMARY WITH OPTIMAL COMPARISON": "–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï –° –°–†–ê–í–ù–ï–ù–ò–ï–ú –û–ü–¢–ò–ú–£–ú–ê",
    "GENERATION": "–ü–æ–∫–æ–ª–µ–Ω–∏–µ",
    "Generation": "–ü–æ–∫–æ–ª–µ–Ω–∏–µ",
    # –ú–µ–ª–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫
    "Best =": "–õ—É—á—à–∏–π =",
    "Avg =": "–°—Ä–µ–¥–Ω–∏–π =",
    "Diversity =": "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ =",
    "Best Fitness": "–õ—É—á—à–∏–π fitness",
    "Average Fitness": "–°—Ä–µ–¥–Ω–∏–π fitness",
    "Worst Fitness": "–•—É–¥—à–∏–π fitness",
    "Fitness Convergence": "–°—Ö–æ–¥–∏–º–æ—Å—Ç—å fitness",
    "Population Diversity Over Time": "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
    "Final Population Fitness Distribution": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ fitness —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏",
    "Fitness Improvement Per Generation": "–£–ª—É—á—à–µ–Ω–∏–µ fitness –≤ –ø–æ–∫–æ–ª–µ–Ω–∏–µ",
    "Performance vs Parameters": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å vs –ü–∞—Ä–∞–º–µ—Ç—Ä—ã",
    "Solution Comparison": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π",
    "SOLUTION DETAILS:": "–î–ï–¢–ê–õ–ò –†–ï–®–ï–ù–ò–Ø:",
    "Items selected:": "–í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
    "Total weight:": "–û–±—â–∏–π –≤–µ—Å:",
    "Solution vector:": "–í–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏—è:",
    "Best Fitness Found:": "–õ—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π fitness:",
    "Optimal Fitness:": "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π fitness:",
    "Accuracy:": "–¢–æ—á–Ω–æ—Å—Ç—å:",
    "Status:": "–°—Ç–∞—Ç—É—Å:",
    "Best Parameter Setting:": "–õ—É—á—à–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:",
    "Fitness with Best Parameters:": "Fitness –ø—Ä–∏ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:",
    "Best Encoding Type:": "–õ—É—á—à–∏–π —Ç–∏–ø –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:",
    "Fitness with Best Encoding:": "Fitness –ø—Ä–∏ –ª—É—á—à–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:",
    "Population Size:": "–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏:",
    "Crossover Rate:": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞:",
    "Mutation Rate:": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏:",
    "Encoding:": "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:",
    "OPTIMAL FOUND!": "–û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!",
    "Very Close": "–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ",
    "TRUE OPTIMAL FOUND": "–ò–°–¢–ò–ù–ù–´–ô –û–ü–¢–ò–ú–£–ú –ù–ê–ô–î–ï–ù",
    "Closest to optimal": "–ë–ª–∏–∂–∞–π—à–∏–π –∫ –æ–ø—Ç–∏–º—É–º—É",
    # –¥–∞—Ç—ã/–º–µ—Ç–∫–∏
    "Execution Time:": "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
    "EXECUTION TIME:": "–í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:",
    "CONVERGED AT GENERATION:": "–°–•–û–î–ò–¢–°–Ø –ù–ê –ü–û–ö–û–õ–ï–ù–ò–ò:",
    "FINAL DIVERSITY:": "–§–ò–ù–ê–õ–¨–ù–û–ï –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï:",
    # –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
}

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ ---
def translate_text(s: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ TRANSLATIONS."""
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –¥–ª–∏–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–µ—Ä–≤—ã–º–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π)
    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –¥–ª–∏–Ω–µ —É–±—ã–≤.
    for k in sorted(TRANSLATIONS.keys(), key=len, reverse=True):
        if k in s:
            s = s.replace(k, TRANSLATIONS[k])
    return s

# --- –ó–∞–º–µ–Ω–∞ builtins.print ---
_original_print = builtins.print

def translated_print(*args: Any, sep: str = " ", end: str = "\n", file=None, flush: bool = False):
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π print —Å–¥–µ–ª–∞–ª –±—ã
    stream = io.StringIO()
    _original_print(*args, sep=sep, end="", file=stream, flush=flush)
    text = stream.getvalue()
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    try:
        text_translated = translate_text(text)
    except Exception:
        text_translated = text  # –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    # –ü–µ—á–∞—Ç–∞–µ–º —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç–æ—è—â–∏–º print
    _original_print(text_translated, end=end, file=file, flush=flush)

# –ü–∞—Ç—á–∏–º print
builtins.print = translated_print

# --- –ó–∞–ø—É—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
def main():
    if len(sys.argv) < 2:
        _original_print("Usage: python wrapper.py your_script.py", file=sys.stderr)
        sys.exit(1)
    target = sys.argv[1]
    # –ü–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∫—Ä–∏–ø—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    sys.argv = sys.argv[1:]
    try:
        runpy.run_path(target, run_name="__main__")
    except SystemExit as e:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SystemExit, —á—Ç–æ–±—ã –æ–±—ë—Ä—Ç–∫–∞ –Ω–µ –ø–∞–¥–∞–ª–∞
        pass
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî –ø–µ—á–∞—Ç–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É (–æ–Ω–∞ —Ç–æ–∂–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ)
        import traceback
        _original_print("Error while running target script:", file=sys.stderr)
        traceback.print_exc()

if __name__ == "__main__":
    main()
